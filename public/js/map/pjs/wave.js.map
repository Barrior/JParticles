{"version":3,"sources":["pjs/wave.js"],"names":["win","Particleground","Wave","selector","options","util","createCanvas","this","set","extend","configDefault","initAttr","createDot","draw","resize","random","Math","sin","pi2","PI","UNDEFINED","opacity","color","num","lineWidth","offsetLeft","offsetTop","crest","rippleNum","speed","area","stroke","prototype","version","attrNormalize","attr","val","isArray","arg","cw","ch","i","getAttr","scale","length","len","push","rippleLength","randomColor","limitRandom","self","Array","split","forEach","lineNum","dots","line","step","j","x","y","cxt","clearRect","globalAlpha","lineDots","save","beginPath","v","lineTo","closePath","fillStyle","fill","strokeStyle","restore","console","log","requestAnimationFrame","wave","constructor","window"],"mappings":"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","file":"pjs/wave.js","sourcesContent":["//snow.js\r\n+function ( win, Particleground ) {\r\n    'use strict';\r\n\r\n    var util = Particleground.util,\r\n        random = Math.random,\r\n        sin = Math.sin,\r\n        pi2 = Math.PI * 2,\r\n        UNDEFINED = 'undefined';\r\n\r\n    function Wave( selector, options ){\r\n        if( !util.createCanvas( selector, this ) ){\r\n            return;\r\n        }\r\n        this.set = util.extend( {}, Wave.configDefault, options );\r\n\r\n        this.initAttr();\r\n        this.createDot();\r\n        this.draw();\r\n        this.resize();\r\n    }\r\n\r\n    Wave.configDefault = {\r\n        //全局透明度\r\n        opacity: 1,\r\n        //线条颜色\r\n        color: [],\r\n        //线条个数\r\n        num: null,\r\n        //线条宽度\r\n        lineWidth: [],\r\n        //线段的横向偏移值，(0, 1)表示波长的倍数，0 & [1, +∞)表示具体数值\r\n        offsetLeft: [],\r\n        //线条中点到元素顶部的距离，(0, 1)表示容器高度的倍数，0 & [1, +∞)表示具体数值\r\n        offsetTop: [],\r\n        //波峰数值，(0, 1)表示容器高度的倍数，0 & [1, +∞)表示具体数值\r\n        crest: [],\r\n        //波纹个数，即正弦周期个数\r\n        rippleNum: [],\r\n        //运动速度\r\n        speed: [],\r\n        //是否绘制成区域图\r\n        area: false,\r\n        //是否绘制边框\r\n        stroke: true,\r\n        //自适应窗口尺寸变化\r\n        resize: true\r\n    };\r\n\r\n\r\n    Wave.prototype = {\r\n        version: '1.0.0',\r\n        initAttr: function(){\r\n            var self = this;\r\n            var cw = self.cw;\r\n            var ch = self.ch;\r\n            var set = self.set;\r\n            var isArray = Array.isArray;\r\n            var randomColor = util.randomColor;\r\n            var limitRandom = util.limitRandom;\r\n            //线条数量\r\n            var num = set.num = set.num || limitRandom( ch / 2, 1 );\r\n            //线条波长，每个周期(2π)在canvas上的实际长度\r\n            var rippleLength = this.rippleLength = [];\r\n\r\n            'color lineWidth offsetLeft offsetTop crest rippleNum speed area stroke'.split(' ')\r\n                .forEach(function( attr ){\r\n                    attrNormalize( attr );\r\n                });\r\n\r\n            function attrNormalize( attr ){\r\n                var val = set[ attr ];\r\n                if( isArray( val ) ){\r\n                    //将crest: []或[2]或[2, 2], 转换成crest: [2, 2, 2]\r\n                    if( attr === 'offsetTop' || attr === 'crest' ||  attr === 'offsetLeft' ){\r\n                        var arg = attr === 'offsetLeft' ? cw : ch;\r\n                        for( var i = 0; i < num; i++ ){\r\n                            val[i] = typeof val[i] === UNDEFINED ?\r\n                                getAttr( attr ) : scale( val[i], arg );\r\n                        }\r\n                    }else if( val.length < num ){\r\n                        for( var i = 0, len = num - val.length; i < len; i++ ){\r\n                            val.push( getAttr( attr ) );\r\n                        }\r\n                    }\r\n                }else {\r\n                    set[ attr ] = [];\r\n                    //将crest: 2, 转换成crest: [2, 2, 2]\r\n                    if( typeof val === 'number' || typeof val === 'boolean' ){\r\n                        for( var i = 0; i < num; i++ ){\r\n                            if( attr === 'offsetTop' || attr === 'crest' ){\r\n                                val = scale( val, ch );\r\n                            }else if( attr === 'offsetLeft' ){\r\n                                val = scale( val, cw );\r\n                            }else if( attr === 'rippleNum' ){\r\n                                rippleLength.push( cw / val );\r\n                            }\r\n                            set[ attr ].push( val );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getAttr( attr ){\r\n                switch ( attr ){\r\n                    case 'color':\r\n                        attr = randomColor();\r\n                        break;\r\n                    case 'lineWidth':\r\n                        attr = limitRandom( 2, .2 );\r\n                        break;\r\n                    case 'offsetLeft':\r\n                        attr = random() * cw;\r\n                        break;\r\n                    case 'offsetTop':\r\n                    case 'crest':\r\n                        attr = random() * ch;\r\n                        break;\r\n                    case 'rippleNum':\r\n                        attr = limitRandom( cw / 2, 1 );\r\n                        rippleLength.push( cw / attr );\r\n                        break;\r\n                    case 'speed':\r\n                        attr = limitRandom( .4, .1 );\r\n                        break;\r\n                    case 'area':\r\n                        attr = false;\r\n                        break;\r\n                    case 'stroke':\r\n                        attr = true;\r\n                        break;\r\n                }\r\n                return attr;\r\n            }\r\n            function scale( val, scale ){\r\n                return val > 0 && val < 1 ? val * scale : val;\r\n            }\r\n        },\r\n        createDot: function(){\r\n            var set = this.set,\r\n                cw = this.cw,\r\n                lineNum = set.num,\r\n                dots = [];\r\n\r\n            for( var i = 0; i < lineNum; i++ ){\r\n\r\n                var\tline = [];\r\n                //一个点的高度\r\n                var step = pi2 / this.rippleLength[i];\r\n\r\n                //创建一条线段所需的点\r\n                for( var j = 0; j < cw; j++ ){\r\n                    line.push({\r\n                        x: j,\r\n                        y: j * step\r\n                    });\r\n                }\r\n\r\n                dots.push( line );\r\n\r\n            }\r\n            this.dots = dots;\r\n        },\r\n        draw: function(){\r\n            var cxt = this.cxt,\r\n                cw = this.cw,\r\n                ch = this.ch,\r\n                set = this.set;\r\n\r\n            cxt.clearRect( 0, 0, cw, ch );\r\n            cxt.globalAlpha = set.opacity;\r\n\r\n            this.dots.forEach(function( lineDots, i ){\r\n                cxt.save();\r\n                cxt.beginPath();\r\n\r\n                var crest = set.crest[i];\r\n                var offsetLeft = set.offsetLeft[i];\r\n                var offsetTop = set.offsetTop[i];\r\n                var speed = set.speed[i];\r\n                var color = set.color[i];\r\n                lineDots.forEach(function( v, j ){\r\n                    cxt[ j ? 'lineTo' : 'moveTo'](\r\n                        v.x,\r\n                        //y = A sin（ ωx + φ ）+ h\r\n                        crest * sin( v.y + offsetLeft ) + offsetTop\r\n                    );\r\n                    v.y -= speed;\r\n                });\r\n                if( set.area[i] ){\r\n                    cxt.lineTo( cw, ch );\r\n                    cxt.lineTo( 0, ch );\r\n                    cxt.closePath();\r\n                    cxt.fillStyle = color;\r\n                    cxt.fill();\r\n                }\r\n                if( set.stroke[i] ){\r\n                    cxt.lineWidth = set.lineWidth[i];\r\n                    cxt.strokeStyle = color;\r\n                    cxt.stroke();\r\n                }\r\n                cxt.restore();\r\n            });\r\n            console.log( this )\r\n            this.requestAnimationFrame();\r\n        }\r\n    };\r\n\r\n    //继承公共方法，如pause，open\r\n    Particleground.extend( Wave.prototype );\r\n    //添加实例\r\n    Particleground.wave = Wave.prototype.constructor = Wave;\r\n}( window, Particleground );"],"sourceRoot":"/source/"}