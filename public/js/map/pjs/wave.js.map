{"version":3,"sources":["pjs/wave.js"],"names":["win","Particleground","Wave","selector","options","util","createCanvas","this","set","extend","configDefault","dots","createDot","draw","resize","sin","Math","random","radian","PI","opacity","color","randomColor","num","lineWidth","crest","speed","prototype","version","ch","dotsNum","cw","i","max","min","scale","arr","j","push","x","y","angle","r","cxt","halfCH","clearRect","globalAlpha","forEach","lineDots","save","beginPath","v","lineTo","moveTo","strokeStyle","stroke","restore","wave","constructor","window"],"mappings":"CACC,SAAWA,EAAKC,GACb,YAQA,SAASC,GAAMC,EAAUC,GAChBC,EAAKC,aAAcH,EAAUI,QAGlCA,KAAKC,IAAMH,EAAKI,UAAYP,EAAKQ,cAAeN,GAEhDG,KAAKI,QACLJ,KAAKK,YACLL,KAAKM,OACLN,KAAKO,UAfT,GAAIT,GAAOJ,EAAeI,KAEtBU,GADSC,KAAKC,OACRD,KAAKD,KACXG,EAASF,KAAKG,GAAK,GACH,GAAVH,KAAKG,EAcfjB,GAAKQ,eAEDU,QAAS,EAETC,OAAQhB,EAAKiB,cAAejB,EAAKiB,cAAejB,EAAKiB,eAErDC,IAAK,EAELC,UAAU,GAEVC,MAAO,EAEPC,MAAO,EAEPZ,QAAQ,GAIZZ,EAAKyB,WACDC,QAAS,QACThB,UAAW,WAUP,IAAK,GATDJ,GAAMD,KAAKC,IAEXiB,GADKlB,KAAKsB,GACFtB,KAAKsB,GAAK,EAAIrB,EAAIiB,OAC1BF,EAAMf,EAAIe,IACVO,EAAUvB,KAAKwB,GAAK,EACpBpB,KAIKqB,IAFIxB,EAAIyB,IAAMzB,EAAI0B,KAAQJ,EAEtB,GAAOP,EAAJS,EAASA,IAAK,CAK1B,IAAK,GAHDG,GAAQ,EAAIH,EAAIxB,EAAIe,IACpBa,KAEKC,EAAI,EAAOP,EAAJO,EAAaA,IACzBD,EAAIE,MACAC,EAAO,EAAJF,EACHG,EAAGH,EAAIP,EAAUL,EAAQU,EAEzBM,MAAOJ,EAEPK,EAAG,GAIX/B,GAAK2B,KAAMF,GAIf7B,KAAKI,KAAOA,GAEhBE,KAAM,WACF,GAAIL,GAAMD,KAAKC,IACXmC,EAAMpC,KAAKoC,IACXZ,EAAKxB,KAAKwB,GACVF,EAAKtB,KAAKsB,GACVe,EAASf,EAAK,EACdH,EAAQlB,EAAIkB,KAEhBiB,GAAIE,UAAW,EAAG,EAAGd,EAAIF,GACzBc,EAAIG,YAActC,EAAIY,QAatBb,KAAKI,KAAKoC,QAAQ,SAAUC,EAAUhB,GAClC,GAAIX,GAAQb,EAAIa,MAAMW,EACtBW,GAAIM,OACJN,EAAIO,YACJF,EAASD,QAAQ,SAAUI,EAAGd,GACtBA,EAEAM,EAAIS,OAAQD,EAAEZ,EAAGY,EAAEX,EAAIzB,EAAKoC,EAAEV,MAAQvB,GAAW0B,GAGjDD,EAAIU,OAAQF,EAAEZ,EAAGY,EAAEX,EAAIzB,EAAKoC,EAAEV,MAAQvB,GAAW0B,GAErDO,EAAEV,OAASf,IAEfiB,EAAIW,YAAcjC,EAClBsB,EAAIY,SACJZ,EAAIa,cAyBhBvD,EAAeQ,OAAQP,EAAKyB,WAE5B1B,EAAewD,KAAOvD,EAAKyB,UAAU+B,YAAcxD,GACpDyD,OAAQ1D","file":"pjs/wave.js","sourcesContent":["//snow.js\r\n+function ( win, Particleground ) {\r\n    'use strict';\r\n\r\n    var util = Particleground.util,\r\n        random = Math.random,\r\n        sin = Math.sin,\r\n        radian = Math.PI / 180,\r\n        pi2 = Math.PI * 2;\r\n\r\n    function Wave( selector, options ){\r\n        if( !util.createCanvas( selector, this ) ){\r\n            return;\r\n        }\r\n        this.set = util.extend( {}, Wave.configDefault, options );\r\n\r\n        this.dots = [];\r\n        this.createDot();\r\n        this.draw();\r\n        this.resize();\r\n    }\r\n\r\n    Wave.configDefault = {\r\n        //全局透明度\r\n        opacity: 1,\r\n        //线条颜色\r\n        color: [util.randomColor(), util.randomColor(), util.randomColor()],\r\n        //线条个数\r\n        num: 3,\r\n        //线条宽度\r\n        lineWidth:.4,\r\n        //波峰数值,容器一半高*此数值\r\n        crest: 1,\r\n        //运动速度\r\n        speed: 6,\r\n        //自适应窗口尺寸变化\r\n        resize: true\r\n    };\r\n\r\n\r\n    Wave.prototype = {\r\n        version: '1.0.0',\r\n        createDot: function(){\r\n            var set = this.set,\r\n                ch = this.ch,\r\n                crest = this.ch / 2 * set.crest,\r\n                num = set.num,\r\n                dotsNum = this.cw / 2,\r\n                dots = [],\r\n\r\n                calc = ( set.max - set.min ) / dotsNum;\r\n\r\n            for( var i = 0; i < num; i++ ){\r\n\r\n                var scale = 1 - i / set.num;\r\n                var\tarr = [];\r\n\r\n                for( var j = 0; j < dotsNum; j++ ){\r\n                    arr.push({\r\n                        x: j * 2,\r\n                        y: j / dotsNum * crest * scale,\r\n                        //y: ch / ( 30 - 27.6 * j / dotNum ),\r\n                        angle: j,\r\n                        //r: j * calc  + set.min\r\n                        r: 1\r\n                    });\r\n                }\r\n\r\n                dots.push( arr );\r\n\r\n            }\r\n\r\n            this.dots = dots;\r\n        },\r\n        draw: function(){\r\n            var set = this.set,\r\n                cxt = this.cxt,\r\n                cw = this.cw,\r\n                ch = this.ch,\r\n                halfCH = ch / 2,\r\n                speed = set.speed;\r\n\r\n            cxt.clearRect( 0, 0, cw, ch );\r\n            cxt.globalAlpha = set.opacity;\r\n\r\n            /*cxt.save();\r\n            cxt.beginPath();\r\n            cxt.moveTo(20, 200);\r\n            cxt.stroke();\r\n            cxt.restore();\r\n            cxt.save();\r\n            cxt.beginPath();\r\n            cxt.lineTo(200, 200);\r\n            cxt.stroke();\r\n            cxt.restore();*/\r\n\r\n            this.dots.forEach(function( lineDots, i ){\r\n                var color = set.color[i];\r\n                cxt.save();\r\n                cxt.beginPath();\r\n                lineDots.forEach(function( v, j ){\r\n                    if( j ){\r\n                        //cxt.lineTo(200, 200)\r\n                        cxt.lineTo( v.x, v.y * sin( v.angle * radian ) + halfCH );\r\n                    }else{\r\n                        //cxt.moveTo(20, 200)\r\n                        cxt.moveTo( v.x, v.y * sin( v.angle * radian ) + halfCH );\r\n                    }\r\n                    v.angle -= speed;\r\n                });\r\n                cxt.strokeStyle = color;\r\n                cxt.stroke();\r\n                cxt.restore();\r\n            });\r\n            /*this.dots.forEach(function( lineDots, i ){\r\n                var color = set.color[i];\r\n                lineDots.forEach(function( v, j ){\r\n                    cxt.save();\r\n                    cxt.beginPath();\r\n                    cxt.arc(\r\n                        v.x,\r\n                        //y = A sin（ ωx + φ ）+ h\r\n                        v.y * sin( v.angle * radian ) + halfCH,\r\n                        v.r, 0, pi2\r\n                    );\r\n                    cxt.fillStyle = color;\r\n                    cxt.fill();\r\n                    cxt.restore();\r\n                    v.angle -= speed;\r\n                });\r\n            });*/\r\n\r\n            //this.requestAnimationFrame();\r\n        }\r\n    };\r\n\r\n    //继承公共方法，如pause，open\r\n    Particleground.extend( Wave.prototype );\r\n    //添加实例\r\n    Particleground.wave = Wave.prototype.constructor = Wave;\r\n}( window, Particleground );"],"sourceRoot":"/source/"}