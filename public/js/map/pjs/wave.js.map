{"version":3,"sources":["pjs/wave.js"],"names":["win","Particleground","Wave","selector","options","util","createCanvas","this","set","extend","configDefault","dots","createDot","draw","resize","sin","Math","random","radian","PI","opacity","color","num","lineWidth","crest","rippleNum","speed","offsetTop","prototype","version","ch","lineNum","dotsNum","cw","i","max","min","line","y","j","push","x","angle","getAttr","attr","val","randomColor","self","cxt","clearRect","globalAlpha","forEach","lineDots","save","beginPath","v","lineTo","moveTo","strokeStyle","stroke","restore","requestAnimationFrame","wave","constructor","window"],"mappings":"CACC,SAAWA,EAAKC,GACb,YAQA,SAASC,GAAMC,EAAUC,GAChBC,EAAKC,aAAcH,EAAUI,QAGlCA,KAAKC,IAAMH,EAAKI,UAAYP,EAAKQ,cAAeN,GAEhDG,KAAKI,QACLJ,KAAKK,YACLL,KAAKM,OACLN,KAAKO,UAfT,GAAIT,GAAOJ,EAAeI,KAEtBU,GADSC,KAAKC,OACRD,KAAKD,KACXG,EAASF,KAAKG,GAAK,GACH,GAAVH,KAAKG,EAcfjB,GAAKQ,eAEDU,QAAS,EAGTC,OAAQ,wBAAyB,wBAAyB,yBAE1DC,IAAK,EAELC,aAEAC,MAAO,EAEPC,UAAW,EAEXC,MAAO,EAEPC,UAAW,GAEXb,QAAQ,GAIZZ,EAAK0B,WACDC,QAAS,QACTjB,UAAW,WAUP,IAAK,GATDJ,GAAMD,KAAKC,IACXsB,EAAKvB,KAAKuB,GAEVC,GADQxB,KAAKuB,GAAK,EAAItB,EAAIgB,MAChBhB,EAAIc,KACdU,EAAUzB,KAAK0B,GACftB,KAIKuB,IAFI1B,EAAI2B,IAAM3B,EAAI4B,KAAQJ,EAEtB,GAAOD,EAAJG,EAAaA,IAAK,CAG9B,GAAIG,MACAC,EAAI9B,EAAImB,SACRW,GAAI,GAAS,EAAJA,IACTA,EAAIA,EAAIR,EAAK,GAAKI,EAGtB,KAAK,GAAIK,GAAI,EAAOP,EAAJO,EAAaA,IACzBF,EAAKG,MACDC,EAAGF,EACHD,EAAGA,EAGHI,MAAOH,GAIf5B,GAAK6B,KAAMH,GAIf9B,KAAKI,KAAOA,GAEhBgC,QAAS,SAAUC,EAAMV,GACrB,GAAI1B,GAAMD,KAAKC,IACXqC,EAAMrC,EAAIoC,GAAMV,EACpB,KAAKW,EAAK,CACN,OAASD,GACL,IAAK,QACDC,EAAMxC,EAAKyC,aACX,MACJ,KAAK,YACDD,EAAM,EAGdrC,EAAIoC,GAAMJ,KAAMK,GAEpB,MAAOA,IAEXhC,KAAM,WACF,GAAIkC,GAAOxC,KACPC,EAAMD,KAAKC,IACXwC,EAAMzC,KAAKyC,IACXf,EAAK1B,KAAK0B,GACVH,EAAKvB,KAAKuB,GAEVJ,EAAQlB,EAAIkB,KAEhBsB,GAAIC,UAAW,EAAG,EAAGhB,EAAIH,GACzBkB,EAAIE,YAAc1C,EAAIY,QAEtBb,KAAKI,KAAKwC,QAAQ,SAAUC,EAAUlB,GAClCc,EAAIK,OACJL,EAAIM,YACJF,EAASD,QAAQ,SAAUI,EAAGhB,GACtBA,EAGAS,EAAIQ,OAAQD,EAAEd,EAAG,IAAM1B,EAAKwC,EAAEb,MAAQxB,GAAWqC,EAAEjB,GAGnDU,EAAIS,OAAQF,EAAEd,EAAG,IAAM1B,EAAKwC,EAAEb,MAAQxB,GAAWqC,EAAEjB,GAEvDiB,EAAEb,OAAShB,IAEfsB,EAAIU,YAAcX,EAAKJ,QAAS,QAAST,GACzCc,EAAIzB,UAAYwB,EAAKJ,QAAS,YAAaT,GAC3Cc,EAAIW,SACJX,EAAIY,YAGRrD,KAAKsD,0BAKb5D,EAAeQ,OAAQP,EAAK0B,WAE5B3B,EAAe6D,KAAO5D,EAAK0B,UAAUmC,YAAc7D,GACpD8D,OAAQ/D","file":"pjs/wave.js","sourcesContent":["//snow.js\r\n+function ( win, Particleground ) {\r\n    'use strict';\r\n\r\n    var util = Particleground.util,\r\n        random = Math.random,\r\n        sin = Math.sin,\r\n        radian = Math.PI / 180,\r\n        pi2 = Math.PI * 2;\r\n\r\n    function Wave( selector, options ){\r\n        if( !util.createCanvas( selector, this ) ){\r\n            return;\r\n        }\r\n        this.set = util.extend( {}, Wave.configDefault, options );\r\n\r\n        this.dots = [];\r\n        this.createDot();\r\n        this.draw();\r\n        this.resize();\r\n    }\r\n\r\n    Wave.configDefault = {\r\n        //全局透明度\r\n        opacity: 1,\r\n        //线条颜色\r\n        //color: [],\r\n        color: ['rgba(0, 190, 112, .9)', 'rgba(0, 190, 112, .6)', 'rgba(0, 190, 112, .3)'],\r\n        //线条个数\r\n        num: 3,\r\n        //线条宽度\r\n        lineWidth: [],\r\n        //波峰数值,容器一半高*此数值\r\n        crest: 1,\r\n        //波纹个数\r\n        rippleNum: 3,\r\n        //运动速度\r\n        speed: 2,\r\n        //线条中点到元素顶部的距离，(0, 1)表示容器的倍数，[1, +∞)表示具体数值\r\n        offsetTop: .7,\r\n        //自适应窗口尺寸变化\r\n        resize: true\r\n    };\r\n\r\n\r\n    Wave.prototype = {\r\n        version: '1.0.0',\r\n        createDot: function(){\r\n            var set = this.set,\r\n                ch = this.ch,\r\n                crest = this.ch / 2 * set.crest,\r\n                lineNum = set.num,\r\n                dotsNum = this.cw,\r\n                dots = [],\r\n\r\n                calc = ( set.max - set.min ) / dotsNum;\r\n\r\n            for( var i = 0; i < lineNum; i++ ){\r\n\r\n                //var scale = 1 - i / set.num;\r\n                var\tline = [];\r\n                var y = set.offsetTop;\r\n                if( y > 0 && y < 1 ){\r\n                    y = y * ch + 10 * i;\r\n                }\r\n\r\n                for( var j = 0; j < dotsNum; j++ ){\r\n                    line.push({\r\n                        x: j,\r\n                        y: y,\r\n                        //y: j / dotsNum * crest * scale,\r\n                        //y: ch / ( 30 - 27.6 * j / dotNum ),\r\n                        angle: j,\r\n                    });\r\n                }\r\n\r\n                dots.push( line );\r\n\r\n            }\r\n\r\n            this.dots = dots;\r\n        },\r\n        getAttr: function( attr, i ){\r\n            var set = this.set;\r\n            var val = set[attr][i];\r\n            if( !val ){\r\n                switch ( attr ){\r\n                    case 'color':\r\n                        val = util.randomColor();\r\n                        break;\r\n                    case 'lineWidth':\r\n                        val = 1;\r\n                        break;\r\n                }\r\n                set[attr].push( val );\r\n            }\r\n            return val;\r\n        },\r\n        draw: function(){\r\n            var self = this,\r\n                set = this.set,\r\n                cxt = this.cxt,\r\n                cw = this.cw,\r\n                ch = this.ch,\r\n                a = ch / 6,\r\n                speed = set.speed;\r\n\r\n            cxt.clearRect( 0, 0, cw, ch );\r\n            cxt.globalAlpha = set.opacity;\r\n\r\n            this.dots.forEach(function( lineDots, i ){\r\n                cxt.save();\r\n                cxt.beginPath();\r\n                lineDots.forEach(function( v, j ){\r\n                    if( j ){\r\n                        //y = A sin（ ωx + φ ）+ h\r\n                        //cxt.lineTo(200, 200)\r\n                        cxt.lineTo( v.x, 100 * sin( v.angle * radian ) + v.y );\r\n                    }else{\r\n                        //cxt.moveTo(20, 200)\r\n                        cxt.moveTo( v.x, 100 * sin( v.angle * radian ) + v.y );\r\n                    }\r\n                    v.angle -= speed;\r\n                });\r\n                cxt.strokeStyle = self.getAttr( 'color', i );\r\n                cxt.lineWidth = self.getAttr( 'lineWidth', i );\r\n                cxt.stroke();\r\n                cxt.restore();\r\n            });\r\n\r\n            this.requestAnimationFrame();\r\n        }\r\n    };\r\n\r\n    //继承公共方法，如pause，open\r\n    Particleground.extend( Wave.prototype );\r\n    //添加实例\r\n    Particleground.wave = Wave.prototype.constructor = Wave;\r\n}( window, Particleground );"],"sourceRoot":"/source/"}